-- Copyright (C) 2016  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Intel and sold by Intel or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.
--B1_count_sig[1] is blink:uut|count_sig[1]
--register power-up is low

B1_count_sig[1] = DFFEAS(B1L2, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[0] is blink:uut|count_sig[0]
--register power-up is low

B1_count_sig[0] = DFFEAS(B1L6, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[7] is blink:uut|count_sig[7]
--register power-up is low

B1_count_sig[7] = DFFEAS(B1L10, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[6] is blink:uut|count_sig[6]
--register power-up is low

B1_count_sig[6] = DFFEAS(B1L14, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[5] is blink:uut|count_sig[5]
--register power-up is low

B1_count_sig[5] = DFFEAS(B1L18, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[4] is blink:uut|count_sig[4]
--register power-up is low

B1_count_sig[4] = DFFEAS(B1L22, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[3] is blink:uut|count_sig[3]
--register power-up is low

B1_count_sig[3] = DFFEAS(B1L26, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[2] is blink:uut|count_sig[2]
--register power-up is low

B1_count_sig[2] = DFFEAS(B1L30, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[13] is blink:uut|count_sig[13]
--register power-up is low

B1_count_sig[13] = DFFEAS(B1L34, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[12] is blink:uut|count_sig[12]
--register power-up is low

B1_count_sig[12] = DFFEAS(B1L38, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[11] is blink:uut|count_sig[11]
--register power-up is low

B1_count_sig[11] = DFFEAS(B1L42, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[10] is blink:uut|count_sig[10]
--register power-up is low

B1_count_sig[10] = DFFEAS(B1L46, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[9] is blink:uut|count_sig[9]
--register power-up is low

B1_count_sig[9] = DFFEAS(B1L50, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[8] is blink:uut|count_sig[8]
--register power-up is low

B1_count_sig[8] = DFFEAS(B1L54, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[25] is blink:uut|count_sig[25]
--register power-up is low

B1_count_sig[25] = DFFEAS(B1L58, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[24] is blink:uut|count_sig[24]
--register power-up is low

B1_count_sig[24] = DFFEAS(B1L62, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[23] is blink:uut|count_sig[23]
--register power-up is low

B1_count_sig[23] = DFFEAS(B1L66, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[22] is blink:uut|count_sig[22]
--register power-up is low

B1_count_sig[22] = DFFEAS(B1L70, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[21] is blink:uut|count_sig[21]
--register power-up is low

B1_count_sig[21] = DFFEAS(B1L74, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[20] is blink:uut|count_sig[20]
--register power-up is low

B1_count_sig[20] = DFFEAS(B1L78, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[19] is blink:uut|count_sig[19]
--register power-up is low

B1_count_sig[19] = DFFEAS(B1L82, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[18] is blink:uut|count_sig[18]
--register power-up is low

B1_count_sig[18] = DFFEAS(B1L86, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[17] is blink:uut|count_sig[17]
--register power-up is low

B1_count_sig[17] = DFFEAS(B1L90, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[16] is blink:uut|count_sig[16]
--register power-up is low

B1_count_sig[16] = DFFEAS(B1L94, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[15] is blink:uut|count_sig[15]
--register power-up is low

B1_count_sig[15] = DFFEAS(B1L98, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1_count_sig[14] is blink:uut|count_sig[14]
--register power-up is low

B1_count_sig[14] = DFFEAS(B1L102, clk, !reset,  ,  ,  ,  , B1L137,  );


--B1L2 is blink:uut|Add0~1
B1L2_adder_eqn = ( B1_count_sig[1] ) + ( GND ) + ( B1L7 );
B1L2 = SUM(B1L2_adder_eqn);

--B1L3 is blink:uut|Add0~2
B1L3_adder_eqn = ( B1_count_sig[1] ) + ( GND ) + ( B1L7 );
B1L3 = CARRY(B1L3_adder_eqn);


--B1L6 is blink:uut|Add0~5
B1L6_adder_eqn = ( B1_count_sig[0] ) + ( VCC ) + ( !VCC );
B1L6 = SUM(B1L6_adder_eqn);

--B1L7 is blink:uut|Add0~6
B1L7_adder_eqn = ( B1_count_sig[0] ) + ( VCC ) + ( !VCC );
B1L7 = CARRY(B1L7_adder_eqn);


--B1L10 is blink:uut|Add0~9
B1L10_adder_eqn = ( B1_count_sig[7] ) + ( GND ) + ( B1L15 );
B1L10 = SUM(B1L10_adder_eqn);

--B1L11 is blink:uut|Add0~10
B1L11_adder_eqn = ( B1_count_sig[7] ) + ( GND ) + ( B1L15 );
B1L11 = CARRY(B1L11_adder_eqn);


--B1L14 is blink:uut|Add0~13
B1L14_adder_eqn = ( B1_count_sig[6] ) + ( GND ) + ( B1L19 );
B1L14 = SUM(B1L14_adder_eqn);

--B1L15 is blink:uut|Add0~14
B1L15_adder_eqn = ( B1_count_sig[6] ) + ( GND ) + ( B1L19 );
B1L15 = CARRY(B1L15_adder_eqn);


--B1L18 is blink:uut|Add0~17
B1L18_adder_eqn = ( B1_count_sig[5] ) + ( GND ) + ( B1L23 );
B1L18 = SUM(B1L18_adder_eqn);

--B1L19 is blink:uut|Add0~18
B1L19_adder_eqn = ( B1_count_sig[5] ) + ( GND ) + ( B1L23 );
B1L19 = CARRY(B1L19_adder_eqn);


--B1L22 is blink:uut|Add0~21
B1L22_adder_eqn = ( B1_count_sig[4] ) + ( GND ) + ( B1L27 );
B1L22 = SUM(B1L22_adder_eqn);

--B1L23 is blink:uut|Add0~22
B1L23_adder_eqn = ( B1_count_sig[4] ) + ( GND ) + ( B1L27 );
B1L23 = CARRY(B1L23_adder_eqn);


--B1L26 is blink:uut|Add0~25
B1L26_adder_eqn = ( B1_count_sig[3] ) + ( GND ) + ( B1L31 );
B1L26 = SUM(B1L26_adder_eqn);

--B1L27 is blink:uut|Add0~26
B1L27_adder_eqn = ( B1_count_sig[3] ) + ( GND ) + ( B1L31 );
B1L27 = CARRY(B1L27_adder_eqn);


--B1L30 is blink:uut|Add0~29
B1L30_adder_eqn = ( B1_count_sig[2] ) + ( GND ) + ( B1L3 );
B1L30 = SUM(B1L30_adder_eqn);

--B1L31 is blink:uut|Add0~30
B1L31_adder_eqn = ( B1_count_sig[2] ) + ( GND ) + ( B1L3 );
B1L31 = CARRY(B1L31_adder_eqn);


--B1L34 is blink:uut|Add0~33
B1L34_adder_eqn = ( B1_count_sig[13] ) + ( GND ) + ( B1L39 );
B1L34 = SUM(B1L34_adder_eqn);

--B1L35 is blink:uut|Add0~34
B1L35_adder_eqn = ( B1_count_sig[13] ) + ( GND ) + ( B1L39 );
B1L35 = CARRY(B1L35_adder_eqn);


--B1L38 is blink:uut|Add0~37
B1L38_adder_eqn = ( B1_count_sig[12] ) + ( GND ) + ( B1L43 );
B1L38 = SUM(B1L38_adder_eqn);

--B1L39 is blink:uut|Add0~38
B1L39_adder_eqn = ( B1_count_sig[12] ) + ( GND ) + ( B1L43 );
B1L39 = CARRY(B1L39_adder_eqn);


--B1L42 is blink:uut|Add0~41
B1L42_adder_eqn = ( B1_count_sig[11] ) + ( GND ) + ( B1L47 );
B1L42 = SUM(B1L42_adder_eqn);

--B1L43 is blink:uut|Add0~42
B1L43_adder_eqn = ( B1_count_sig[11] ) + ( GND ) + ( B1L47 );
B1L43 = CARRY(B1L43_adder_eqn);


--B1L46 is blink:uut|Add0~45
B1L46_adder_eqn = ( B1_count_sig[10] ) + ( GND ) + ( B1L51 );
B1L46 = SUM(B1L46_adder_eqn);

--B1L47 is blink:uut|Add0~46
B1L47_adder_eqn = ( B1_count_sig[10] ) + ( GND ) + ( B1L51 );
B1L47 = CARRY(B1L47_adder_eqn);


--B1L50 is blink:uut|Add0~49
B1L50_adder_eqn = ( B1_count_sig[9] ) + ( GND ) + ( B1L55 );
B1L50 = SUM(B1L50_adder_eqn);

--B1L51 is blink:uut|Add0~50
B1L51_adder_eqn = ( B1_count_sig[9] ) + ( GND ) + ( B1L55 );
B1L51 = CARRY(B1L51_adder_eqn);


--B1L54 is blink:uut|Add0~53
B1L54_adder_eqn = ( B1_count_sig[8] ) + ( GND ) + ( B1L11 );
B1L54 = SUM(B1L54_adder_eqn);

--B1L55 is blink:uut|Add0~54
B1L55_adder_eqn = ( B1_count_sig[8] ) + ( GND ) + ( B1L11 );
B1L55 = CARRY(B1L55_adder_eqn);


--B1L58 is blink:uut|Add0~57
B1L58_adder_eqn = ( B1_count_sig[25] ) + ( GND ) + ( B1L63 );
B1L58 = SUM(B1L58_adder_eqn);


--B1L62 is blink:uut|Add0~61
B1L62_adder_eqn = ( B1_count_sig[24] ) + ( GND ) + ( B1L67 );
B1L62 = SUM(B1L62_adder_eqn);

--B1L63 is blink:uut|Add0~62
B1L63_adder_eqn = ( B1_count_sig[24] ) + ( GND ) + ( B1L67 );
B1L63 = CARRY(B1L63_adder_eqn);


--B1L66 is blink:uut|Add0~65
B1L66_adder_eqn = ( B1_count_sig[23] ) + ( GND ) + ( B1L71 );
B1L66 = SUM(B1L66_adder_eqn);

--B1L67 is blink:uut|Add0~66
B1L67_adder_eqn = ( B1_count_sig[23] ) + ( GND ) + ( B1L71 );
B1L67 = CARRY(B1L67_adder_eqn);


--B1L70 is blink:uut|Add0~69
B1L70_adder_eqn = ( B1_count_sig[22] ) + ( GND ) + ( B1L75 );
B1L70 = SUM(B1L70_adder_eqn);

--B1L71 is blink:uut|Add0~70
B1L71_adder_eqn = ( B1_count_sig[22] ) + ( GND ) + ( B1L75 );
B1L71 = CARRY(B1L71_adder_eqn);


--B1L74 is blink:uut|Add0~73
B1L74_adder_eqn = ( B1_count_sig[21] ) + ( GND ) + ( B1L79 );
B1L74 = SUM(B1L74_adder_eqn);

--B1L75 is blink:uut|Add0~74
B1L75_adder_eqn = ( B1_count_sig[21] ) + ( GND ) + ( B1L79 );
B1L75 = CARRY(B1L75_adder_eqn);


--B1L78 is blink:uut|Add0~77
B1L78_adder_eqn = ( B1_count_sig[20] ) + ( GND ) + ( B1L83 );
B1L78 = SUM(B1L78_adder_eqn);

--B1L79 is blink:uut|Add0~78
B1L79_adder_eqn = ( B1_count_sig[20] ) + ( GND ) + ( B1L83 );
B1L79 = CARRY(B1L79_adder_eqn);


--B1L82 is blink:uut|Add0~81
B1L82_adder_eqn = ( B1_count_sig[19] ) + ( GND ) + ( B1L87 );
B1L82 = SUM(B1L82_adder_eqn);

--B1L83 is blink:uut|Add0~82
B1L83_adder_eqn = ( B1_count_sig[19] ) + ( GND ) + ( B1L87 );
B1L83 = CARRY(B1L83_adder_eqn);


--B1L86 is blink:uut|Add0~85
B1L86_adder_eqn = ( B1_count_sig[18] ) + ( GND ) + ( B1L91 );
B1L86 = SUM(B1L86_adder_eqn);

--B1L87 is blink:uut|Add0~86
B1L87_adder_eqn = ( B1_count_sig[18] ) + ( GND ) + ( B1L91 );
B1L87 = CARRY(B1L87_adder_eqn);


--B1L90 is blink:uut|Add0~89
B1L90_adder_eqn = ( B1_count_sig[17] ) + ( GND ) + ( B1L95 );
B1L90 = SUM(B1L90_adder_eqn);

--B1L91 is blink:uut|Add0~90
B1L91_adder_eqn = ( B1_count_sig[17] ) + ( GND ) + ( B1L95 );
B1L91 = CARRY(B1L91_adder_eqn);


--B1L94 is blink:uut|Add0~93
B1L94_adder_eqn = ( B1_count_sig[16] ) + ( GND ) + ( B1L99 );
B1L94 = SUM(B1L94_adder_eqn);

--B1L95 is blink:uut|Add0~94
B1L95_adder_eqn = ( B1_count_sig[16] ) + ( GND ) + ( B1L99 );
B1L95 = CARRY(B1L95_adder_eqn);


--B1L98 is blink:uut|Add0~97
B1L98_adder_eqn = ( B1_count_sig[15] ) + ( GND ) + ( B1L103 );
B1L98 = SUM(B1L98_adder_eqn);

--B1L99 is blink:uut|Add0~98
B1L99_adder_eqn = ( B1_count_sig[15] ) + ( GND ) + ( B1L103 );
B1L99 = CARRY(B1L99_adder_eqn);


--B1L102 is blink:uut|Add0~101
B1L102_adder_eqn = ( B1_count_sig[14] ) + ( GND ) + ( B1L35 );
B1L102 = SUM(B1L102_adder_eqn);

--B1L103 is blink:uut|Add0~102
B1L103_adder_eqn = ( B1_count_sig[14] ) + ( GND ) + ( B1L35 );
B1L103 = CARRY(B1L103_adder_eqn);


--output is output
output = OUTPUT(B1_output_sig);


--B1_output_sig is blink:uut|output_sig
--register power-up is low

B1_output_sig = DFFEAS(B1L139, clk, !reset,  ,  ,  ,  ,  ,  );


--B1L132 is blink:uut|Equal0~0
B1L132 = (!B1_count_sig[1] & !B1_count_sig[0]);


--B1L133 is blink:uut|Equal0~1
B1L133 = ( !B1_count_sig[3] & ( !B1_count_sig[2] & ( (B1_count_sig[7] & (!B1_count_sig[6] & (!B1_count_sig[5] & !B1_count_sig[4]))) ) ) );


--B1L134 is blink:uut|Equal0~2
B1L134 = ( !B1_count_sig[9] & ( !B1_count_sig[8] & ( (B1_count_sig[13] & (B1_count_sig[12] & (!B1_count_sig[11] & !B1_count_sig[10]))) ) ) );


--B1L135 is blink:uut|Equal0~3
B1L135 = ( B1_count_sig[21] & ( B1_count_sig[20] & ( (B1_count_sig[25] & (!B1_count_sig[24] & (B1_count_sig[23] & B1_count_sig[22]))) ) ) );


--B1L136 is blink:uut|Equal0~4
B1L136 = ( B1_count_sig[15] & ( B1_count_sig[14] & ( (B1_count_sig[19] & (!B1_count_sig[18] & (B1_count_sig[17] & !B1_count_sig[16]))) ) ) );


--B1L139 is blink:uut|output_sig~0
B1L139 = ( B1L135 & ( B1L136 & ( !B1_output_sig $ (((!B1L132) # ((!B1L133) # (!B1L134)))) ) ) ) # ( !B1L135 & ( B1L136 & ( B1_output_sig ) ) ) # ( B1L135 & ( !B1L136 & ( B1_output_sig ) ) ) # ( !B1L135 & ( !B1L136 & ( B1_output_sig ) ) );


--clk is clk
clk = INPUT();


--reset is reset
reset = INPUT();


--B1L137 is blink:uut|Equal0~5
B1L137 = ( B1L136 & ( (B1L132 & (B1L133 & (B1L134 & B1L135))) ) );


